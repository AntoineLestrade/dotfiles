let g:is_nvim = has('nvim')
" Switches {{{
let g:enable_cursorline = 0
let g:echo_startup_time = 1
let g:enable_completion = 0

let g:has_persistent_undo = has('persistent_undo')
" }}}

" Startup {{{
if g:echo_startup_time && has('vim_starting') && has('reltime')
    let s:startuptime = reltime()
    autocmd VimEnter * let s:startuptime = reltime(s:startuptime) | redraw | echomsg 'startuptime: ' . reltimestr(s:startuptime)
endif
" }}}
if filereadable($HOME.'/_vimrc.before')
    source $HOME/_vimrc.before
endif
" Initialization {{{
let g:is_windows = has('win32') || has('win64')
if g:is_nvim
    if g:is_windows
        if exists('$XDG_CONFIG_HOME')
            let g:rc_dir = $XDG_CONFIG_HOME.'/nvim'
        else
            let g:rc_dir = $LOCALAPPDATA.'/nvim'
        endif
    else
        let g:rc_dir = $HOME.'/.nvim'
    endif
else
    set nocompatible
    if g:is_windows
        let g:rc_dir = $HOME.'/vimfiles'
    else
        let g:rc_dir = $HOME.'/.vim'
    endif
endif
let $CACHE = g:rc_dir . '/cache'

function! s:get_rc_script(relative_path)
    return expand(g:rc_dir . '/rc/' . a:relative_path)
endfunction
function! s:source_rc(relative_path)
    execute 'source' fnameescape(s:get_rc_script(a:relative_path))
endfunction

" }}} Initialization
" Plugins {{{
" silent! if plug#begin($CACHE.'/plugged')
execute 'set rtp+='.$CACHE.'/dein_plugins/repos/github.com/Shougo/dein.vim'
if dein#load_state($CACHE.'/dein_plugins')
    call dein#begin($CACHE.'/dein_plugins')
    call dein#add($CACHE.'/dein_plugins/repos/github.com/Shougo/dein.vim')

    call dein#add('will133/vim-dirdiff')
    call dein#add('mattn/emmet-vim')
    " ## Completion {{{
    if g:enable_completion
        if g:is_nvim
            call dein#add('Shougo/deoplete.nvim', { 'lazy': 1, 'on_event': 'InsertEnter', 'hook_source': 'source '.s:get_rc_script('plugins/deoplete.vim') })
        elseif has('lua')
            call dein#add('Shougo/neocomplete.vim', { 'lazy': 1, 'on_event': 'InsertEnter', 'hook_source': 'source '.s:get_rc_script('plugins/neocomplete.vim') })
        endif
        call dein#add('Shougo/neco-vim') " Vim source for neocomplete
    endif
    " ## }}}
    " ## Development {{{
    " #### Git {{{
    call dein#add('tpope/vim-fugitive')
    "call dein#add('rhysd/committia.vim')
    call dein#add('jreybert/vimagit')
    call dein#add('airblade/vim-gitgutter')

    call dein#add('gregsexton/gitv', { 'on': 'Gitv' })
    " #### }}}
    " #### Powershell {{{
    call dein#add('PProvost/vim-ps1')
    " #### }}}
    " #### Rust {{{
    call dein#add('rust-lang/rust.vim', { 'lazy': 1, 'on_ft': 'rust'}) " {{{
    let g:rust_fold = 1
    let g:ftplugin_rust_source_path = 'D:/ProgramFiles/Rust_src/src'
    " }}}
    " }}}
    " #### SQL {{{
    call dein#add('vim-scripts/sqlserver.vim', { 'lazy': 1, 'on_ft': 'sql' }) " {{{
    let g:sql_type_default = "sqlserver" " }}}
    " #### }}}
    " #### Syntax checking {{{
    call dein#add('scrooloose/syntastic')
    call dein#add('syngan/vim-vimlint', { 'depends': 'ynkdir/vim-vimlparser' })
    " #### }}}
    " #### TOML {{{
    call dein#add('cespare/vim-toml', { 'lazy': 1, 'on_ft': 'toml' })
    " #### }}}
    " ## }}}
    " ## User interface {{{
    call dein#add('w0ng/vim-hybrid')
    call dein#add('chriskempson/base16-vim')
    call dein#add('altercation/vim-colors-solarized')
    call dein#add('itchyny/lightline.vim', { 'hook_source': 'source '. s:get_rc_script('plugins/lightline.vim') }) " {{{
    " lightline.vim }}}
    if has('signs')
        call dein#add('mattesgroeger/vim-bookmarks')
    endif
    " ## }}}
    " ## pandoc {{{
    call dein#add('vim-pandoc/vim-pandoc-syntax')
    call dein#add('vim-pandoc/vim-pandoc')
    " ##}}}
    if has('python3')
        "call dein#add('Shougo/denite.nvim', { 'lazy': 1, 'on_cmd': 'Denite', 'hook_source': 'source '. s:get_rc_script('plugins/denite.vim') })
        if g:is_nvim
            call dein#add('Shougo/deoplete.nvim')
        else
            call dein#add('Shougo/denite.nvim', { 'hook_source': 'source '. s:get_rc_script('plugins/denite.vim') })
        endif
    endif

    call dein#end()
    call dein#save_state()
endif
call s:source_rc('plugins/lightline.vim')
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wg = 0
    "let g:syntastic_vimlint_options = { 'EVL103': 1 }
    augroup AutoSyntastic " {{{
        autocmd!
        autocmd BufWritePost *.c,*.cpp,*.perl,*.py,*rs call s:syntastic()
    augroup END " }}}
    function! s:syntastic() " {{{
        SyntasticCheck
        call lightline#update()
    endfunction " }}}
"  Plguins }}}
" Vim settings {{{
filetype plugin indent on

if g:is_nvim
    let g:python3_host_prog='D:/Antoine/python_envs/python3/Scripts/python.exe'
endif
" ## Basic options {{{
set autoread                   " Automatically read file again which has been changed outside of Vim
set backspace=indent,eol,start " Working of <BS>,<Del>,CTRL-W,CTRL-U
set display=lastline           " display as much as possible the last line
set formatoptions+=j
set hidden                     " Display another buffer when current buffer isn't saved.
set history=1000               " Store a ton of history (default is 20)
set linebreak                  " Vim will wrap long lines at a character in 'breakat'
set mouse=a                    " Automatically enable mouse usage
set mousehide                  " Hide the mouse cursor while typing
set ruler                      " Show the linz and column number of the cursor position. Useless with lightline or something like that
set scrolloff=3                " Lines above/below cursor
set sidescrolloff=5
set splitright                 " Puts new vsplit windows to the right of the current
set splitbelow                 " Puts new split windows to the bottom of the current
" ## }}}
" ## Tab basic settings {{{
set autoindent        " Copy indent from current line when starting a new line
set expandtab         " Use the appropriate number of spaces to insert a <Tab>
set shiftround        " Round indent to multiple of 'shiftwidth'
set smarttab          " When <Tab> pressed in front of a line, insert siftwidth spaces
set shiftwidth=4      " Number of spaces to use for each step of (auto)indent
set softtabstop=4     " Number of spaces that a <Tab> counts for while editing operations
set tabstop=8         " Number of spaces that a <Tab> in the file counts for
set virtualedit=block " Allow cursor to be where there is no actual charecter (in visual block mode)

set pastetoggle=<F12> " Toggle 'paste' mode (can be used in terminal when pasting from other program)
" }}}
" ## Encoding {{{
set encoding=utf-8
if g:is_windows
    set termencoding=latin1
else
    set termencoding=
endif
" }}}
" ## Search basic settings {{{
set incsearch  " Incremental searching
set ignorecase " Ignore case in search patterns
set smartcase  " Override the ignorecase option if the pattern contains upper case
" set hlsearch   " Highlight search patterns, support reloading
" ## }}}
" ## Backup {{{
set backup
" ## }}}
" ## Clipboard {{{
if has('clipboard')
    if has('unnamedplus') " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else
        set clipboard=unnamed
    endif
endif
" ## }}}
" ## Undo Basic {{{
if g:has_persistent_undo
    set undofile        " auotmatically saves undo history
    set undolevels=1000
    set undoreload=1000 " Save the whole buffer for undo when reloading it
endif
" ## }}}
" ## Wildmenu {{{
set wildmenu
set wildmode=longest:full,full
" ## }}}
" ## Matching {{{
" set matchtime=2
set matchpairs+=<:>
set showmatch
" ## }}}
" ## Cursorline {{{
if g:enable_cursorline
    augroup cursorLine
        autocmd!
        autocmd CursorMoved,CursorMovedI,WinLeave * setlocal nocursorline
        autocmd CursorHold,CursorHoldI,WinEnter   * setlocal cursorline
    augroup END
endif
" ## }}}
" ## Close help {{{
autocmd filetype help nnoremap <buffer> q <C-w>c
" }}}
" ## Cusrsor posision when opening a file {{{
function! ResetCursorPosition()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resetCursorPosition
    autocmd!
    autocmd BufWinEnter * call ResetCursorPosition()
augroup END
autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
" ## }}}
" ## Trailing whitespaces {{{
function! s:hl_trailing_spaces() " {{{
    highlight! link TrailingSpaces Error
    syntax match TrailingSpaces containedin=ALL /\s\+$/
endfunction " }}}
autocmd BufWinEnter,ColorScheme * call s:hl_trailing_spaces()

command! -range=% RemoveTrailSpace <line1>,<line2>s!\s*$!!g | nohlsearch
command! -range=% RemoveTrailM <line1>,<line2>s!\r$!!g | nohlsearch
" ## }}}
" ## Folding {{{
set foldcolumn=2
set foldlevelstart=99
" ## }}}
" }}}
" Key bindings {{{
nnoremap ^ :
let mapleader=','

"inoremap jk <Esc>
"onoremap jk <Esc>
"cnoremap jk <Esc>
inoremap jj <Esc>
onoremap jj <Esc>
cnoremap jj <Esc>

inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

" ## Move around windows {{{
nmap <A-S-h> <C-w>h
imap <A-S-h> <C-o><C-w>h
nmap <A-S-j> <C-w>j
imap <A-S-j> <C-o><C-w>j
nmap <A-S-k> <C-w>k
imap <A-S-k> <C-o><C-w>k
nmap <A-S-l> <C-w>l
imap <A-S-l> <C-o><C-w>l
" ## }}}
" ## Move windows {{{
nmap <C-A-h> <C-w>H
imap <C-A-h> <C-o><C-w>H
nmap <C-A-j> <C-w>J
imap <C-A-j> <C-o><C-w>J
nmap <C-A-k> <C-w>K
imap <C-A-k> <C-o><C-w>K
nmap <C-A-l> <C-w>L
imap <C-A-l> <C-o><C-w>L
" ## }}}

" ## Folding {{{
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>
" ## }}}
" ## Shifting {{{
" Move up and down current lines
"nnoremap <Up> mz:m+<CR>'z
"nnoremap <Down> mz:m+<CR>'z
"inoremap <Up> <C-o>mz:m+<CR>'z
"inoremap <Down> <C-o>mz:m+<CR>'z
"vnoremap <Up> :m'>+<CR>'<my'>mzgv'yo'z
"vnoremap <Down> :m'<-2'><CR>ly'<mzgv'yo'z

"nnoremap <Left> <<
"nnoremap <Right> >>
"inoremap <Left> <C-o><<
"inoremap <Right> <C-o>>>
"vnoremap <Left> <gv
"vnoremap <Right> >gv

vnoremap < <gv
vnoremap > >gv
" ## }}}
" ## Buffers {{{
nnoremap <F5> :buffers<CR>:buffer<Space>
" }}}

" ## Save {{{
noremap <C-s> :update<CR>
vnoremap <C-s> <C-c>:update<CR>
inoremap <C-s> <C-o>:update<CR>
" ## }}}
" }}}

" Colorscheme {{{
if has('vim_starting')
    syntax on
    set background=dark
    set t_Co=256
    if (&t_Co < 256 || !has('gui')) && !g:is_nvim
        " colorscheme base16-default
        colorscheme default
    else
        try
            " colorscheme base16-default
            colorscheme hybrid
        catch
            colorscheme darkblue
        endtry
    endif
endif
" TODO: Test
function! EnableLightTheming () " {{{
    set background=light
    try
        colorscheme solarized
    catch
        colorscheme default
    endtry
    call extend(g:lightline, { 'colorscheme': 'solarized' })
    call lightline#init()
    call lightline#colorscheme()
endfunction " }}}
command! -bang LightTheming call EnableLightTheming()

function! EnableDarkTheming() " {{{
    set background=dark
    try
        colorscheme hybrid
    catch
        colorscheme darkblue
    endtry
    call extend(g:lightline, { 'colorscheme': 'jellybeans' })
    call lightline#init()
    call lightline#colorscheme()
endfunction " }}}
command! -bang DarkTheming call EnableDarkTheming()
" }}} Colorscheme

" Create needed directories {{{
function! s:initialize_directories() " {{{
    let dir_list = { 'backup': 'backupdir', 'views': 'viewdir', 'swap': 'directory' }
    if g:has_persistent_undo
        let dir_list['undo'] = 'undodir'
    endif

    for [dirname, settingname] in items(dir_list)
        let directory = $CACHE . '/' . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction " }}}
call s:initialize_directories()
" }}}

" Finally {{{
if filereadable($HOME.'/_vimrc.last')
    source $HOME/_vimrc.last
endif

" ## Unlet useless variables {{{
unlet g:has_persistent_undo
unlet g:enable_completion
unlet g:echo_startup_time
unlet g:enable_cursorline
" ## }}}

set secure
" }}}

" vim: set foldmethod=marker et sts=4 sw=4:
" vim:ft=vim fileformat=unix:
